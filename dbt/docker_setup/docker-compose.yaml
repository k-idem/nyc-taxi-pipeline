version: "3.9"

services:
  # ── Postgres metadata DB ──────────────────────────────────────────────
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
      POSTGRES_DB: kestra
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data

  # ── Kestra server & worker ────────────────────────────────────────────
  kestra:
    image: kestra/kestra:v0.20.7
    pull_policy: always
    user: "root"
    command: server standalone

    volumes:
      # project-specific mounts
      - ./flows:/app/flows
      - ./dbt:/app/dbt
      - /home/kidem/nyc-taxi-pipeline/gcp_key.json:/creds/gcp_key.json:ro
      # runtime mounts
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd

    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4
        kestra:
          server:
            basicAuth:
              enabled: false
              username: "admin@kestra.io"
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
            env:
              GOOGLE_APPLICATION_CREDENTIALS: /creds/gcp_key.json
          url: http://localhost:8080/
      GOOGLE_APPLICATION_CREDENTIALS: /creds/gcp_key.json

    ports:
      - "8080:8080" # UI + API
      - "8081:8081" # internal gRPC

    depends_on:
      # wait until Postgres is healthy
      postgres:
        condition: service_started

volumes:
  pg_data:
  kestra-data:
